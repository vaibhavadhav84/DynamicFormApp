{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// const App = () => {\n//   // State for the selected form type\n//   const [formType, setFormType] = useState('');\n//   // State to hold the fields for the selected form type\n//   const [formFields, setFormFields] = useState([]);\n//   // State to store user input for the form\n//   const [formData, setFormData] = useState({});\n//   // State to track the progress of form completion\n//   const [progress, setProgress] = useState(0);\n//   // State to hold all submitted form data\n//   const [submittedData, setSubmittedData] = useState([]);\n//   // State to display messages for user actions\n//   const [message, setMessage] = useState('');\n//   // Simulated API responses for different form types\n//   const apiResponses = React.useMemo(() => ({\n//     userInformation: {\n//       fields: [\n//         { name: 'firstName', type: 'text', label: 'First Name', required: true },\n//         { name: 'lastName', type: 'text', label: 'Last Name', required: true },\n//         { name: 'age', type: 'number', label: 'Age', required: false },\n//       ],\n//     },\n//     addressInformation: {\n//       fields: [\n//         { name: 'street', type: 'text', label: 'Street', required: true },\n//         { name: 'city', type: 'text', label: 'City', required: true },\n//         { name: 'state', type: 'dropdown', label: 'State', options: ['California', 'Texas', 'New York'], required: true },\n//         { name: 'zipCode', type: 'text', label: 'Zip Code', required: false },\n//       ],\n//     },\n//     paymentInformation: {\n//       fields: [\n//         { name: 'cardNumber', type: 'text', label: 'Card Number', required: true },\n//         { name: 'expiryDate', type: 'date', label: 'Expiry Date', required: true },\n//         { name: 'cvv', type: 'password', label: 'CVV', required: true },\n//         { name: 'cardholderName', type: 'text', label: 'Cardholder Name', required: true },\n//       ],\n//     },\n//   }), []);\n//   // Effect to load form fields when form type changes\n//   useEffect(() => {\n//     if (formType) {\n//       setFormFields(apiResponses[formType]?.fields || []); // Fetch fields based on selected form type\n//       setFormData({}); // Reset form data\n//       setProgress(0); // Reset progress bar\n//     }\n//   }, [formType, apiResponses]);\n//   // Handler for form field changes\n//   const handleInputChange = (e, field) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({ ...prevData, [name]: value })); // Update form data\n//     // Calculate progress as a percentage of completed required fields\n//     const completedFields = formFields.filter((field) => formData[field.name] || field.name === name);\n//     setProgress((completedFields.length / formFields.length) * 100);\n//   };\n//   // Form submission handler\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     // Validate required fields\n//     const requiredFields = formFields.filter((field) => field.required);\n//     const missingFields = requiredFields.filter((field) => !formData[field.name]);\n//     if (missingFields.length) {\n//       setMessage('Please fill in all required fields.'); // Error message for missing fields\n//     } else {\n//       setSubmittedData((prevData) => [...prevData, formData]); // Add form data to submitted list\n//       setFormType(''); // Reset form type\n//       setMessage('Form submitted successfully!'); // Success message\n//     }\n//   };\n//   // Delete a row from the submitted data table\n//   const handleDelete = (index) => {\n//     const updatedData = submittedData.filter((_, i) => i !== index);\n//     setSubmittedData(updatedData); // Update state after deletion\n//     setMessage('Entry deleted successfully.'); // Deletion feedback\n//   };\n//   // Edit a row from the submitted data table\n//   const handleEdit = (index) => {\n//     setFormData(submittedData[index]); // Load data into the form\n//     setSubmittedData((prevData) => prevData.filter((_, i) => i !== index)); // Remove the entry being edited\n//     setMessage('Editing entry...'); // Feedback message\n//   };\n//   return (\n//     <div className=\"app\">\n//       <header>\n//         <h1>Dynamic Form</h1>\n//       </header>\n//       <main>\n//         <div className=\"form-container\">\n//           {/* Dropdown to select form type */}\n//           <label htmlFor=\"formType\">Choose Form Type:</label>\n//           <select\n//             id=\"formType\"\n//             value={formType}\n//             onChange={(e) => setFormType(e.target.value)}\n//           >\n//             <option value=\"\">-- Select --</option>\n//             <option value=\"userInformation\">User Information</option>\n//             <option value=\"addressInformation\">Address Information</option>\n//             <option value=\"paymentInformation\">Payment Information</option>\n//           </select>\n//           {/* Render form fields dynamically */}\n//           {formFields.length > 0 && (\n//             <form onSubmit={handleSubmit}>\n//               {formFields.map((field) => (\n//                 <div key={field.name} className=\"form-field\">\n//                   <label htmlFor={field.name}>\n//                     {field.label} {field.required && '*'}\n//                   </label>\n//                   {field.type === 'dropdown' ? (\n//                     <select\n//                       id={field.name}\n//                       name={field.name}\n//                       value={formData[field.name] || ''}\n//                       onChange={(e) => handleInputChange(e, field)}\n//                     >\n//                       <option value=\"\">-- Select --</option>\n//                       {field.options.map((option) => (\n//                         <option key={option} value={option}>\n//                           {option}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   ) : (\n//                     <input\n//                       id={field.name}\n//                       type={field.type}\n//                       name={field.name}\n//                       value={formData[field.name] || ''}\n//                       onChange={(e) => handleInputChange(e, field)}\n//                       required={field.required}\n//                     />\n//                   )}\n//                 </div>\n//               ))}\n//               {/* Progress bar for form completion */}\n//               <div className=\"progress-bar\">\n//                 <div style={{ width: `${progress}%` }}></div>\n//               </div>\n//               <button type=\"submit\">Submit</button>\n//             </form>\n//           )}\n//         </div>\n//         {/* Display feedback message */}\n//         {message && <p className=\"message\">{message}</p>}\n//         {/* Display submitted data in tabular format */}\n//         {submittedData.length > 0 && (\n//           <div className=\"data-table\">\n//             <h2>Submitted Data</h2>\n//             <table>\n//               <thead>\n//                 <tr>\n//                   {Object.keys(submittedData[0]).map((key) => (\n//                     <th key={key}>{key}</th>\n//                   ))}\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {submittedData.map((data, index) => (\n//                   <tr key={index}>\n//                     {Object.values(data).map((value, i) => (\n//                       <td key={i}>{value}</td>\n//                     ))}\n//                     <td>\n//                       <button onClick={() => handleEdit(index)}>Edit</button>\n//                       <button onClick={() => handleDelete(index)}>Delete</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </main>\n//       <footer>\n//         <p>&copy; 2024 Dynamic Form App</p>\n//       </footer>\n//     </div>\n//   );\n// };\n// export default App;\nimport React,{useState,useEffect}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{// State for the selected form type\nconst[formType,setFormType]=useState('');// State to hold the fields for the selected form type\nconst[formFields,setFormFields]=useState([]);// State to store user input for the form\nconst[formData,setFormData]=useState({});// State to track the progress of form completion\nconst[progress,setProgress]=useState(0);// State to hold all submitted form data\nconst[submittedData,setSubmittedData]=useState([]);// State to display messages for user actions\nconst[message,setMessage]=useState('');// State for form validation errors\nconst[formErrors,setFormErrors]=useState({});// Simulated API responses for different form types\nconst apiResponses=React.useMemo(()=>({userInformation:{fields:[{name:'firstName',type:'text',label:'First Name',required:true},{name:'lastName',type:'text',label:'Last Name',required:true},{name:'age',type:'number',label:'Age',required:false}]},addressInformation:{fields:[{name:'street',type:'text',label:'Street',required:true},{name:'city',type:'text',label:'City',required:true},{name:'state',type:'dropdown',label:'State',options:['California','Texas','New York'],required:true},{name:'zipCode',type:'text',label:'Zip Code',required:false}]},paymentInformation:{fields:[{name:'cardNumber',type:'text',label:'Card Number',required:true},{name:'expiryDate',type:'date',label:'Expiry Date',required:true},{name:'cvv',type:'password',label:'CVV',required:true},{name:'cardholderName',type:'text',label:'Cardholder Name',required:true}]}}),[]);// Effect to load form fields when form type changes\nuseEffect(()=>{if(formType){var _apiResponses$formTyp;setFormFields(((_apiResponses$formTyp=apiResponses[formType])===null||_apiResponses$formTyp===void 0?void 0:_apiResponses$formTyp.fields)||[]);// Fetch fields based on selected form type\nsetFormData({});// Reset form data\nsetProgress(0);// Reset progress bar\nsetFormErrors({});// Clear errors\n}},[formType,apiResponses]);// Handler for form field changes\nconst handleInputChange=(e,field)=>{const{name,value}=e.target;setFormData(prevData=>({...prevData,[name]:value}));// Update form data\n// Validate field dynamically as the user types\nlet errors={...formErrors};if(field.required&&!value){errors[name]=`${field.label} is required`;}else if(field.type==='number'&&isNaN(value)){errors[name]=`${field.label} must be a valid number`;}else if(field.type==='text'&&value.trim()===''){errors[name]=`${field.label} cannot be empty`;}else{delete errors[name];// Remove error when the field is valid\n}setFormErrors(errors);// Calculate progress based on valid fields\nconst validFields=formFields.filter(field=>formData[field.name]&&!formErrors[field.name]);setProgress(validFields.length/formFields.length*100);};// Form submission handler\nconst handleSubmit=e=>{e.preventDefault();let errors={};// Validate required fields and data types\nformFields.forEach(field=>{if(field.required&&!formData[field.name]){errors[field.name]=`${field.label} is required`;}else if(field.type==='number'&&isNaN(formData[field.name])){errors[field.name]=`${field.label} must be a valid number`;}else if(field.type==='text'&&formData[field.name].trim()===''){errors[field.name]=`${field.label} cannot be empty`;}});// Set errors and check if form is valid\nif(Object.keys(errors).length>0){setFormErrors(errors);// Display errors\nsetMessage('Please fill in all required fields correctly.');// Global error message\n}else{setFormErrors({});// Clear previous errors\nsetSubmittedData(prevData=>[...prevData,formData]);// Submit data\nsetFormType('');// Reset form type\nsetMessage('Form submitted successfully!');// Success message\n}};// Delete a row from the submitted data table\nconst handleDelete=index=>{const updatedData=submittedData.filter((_,i)=>i!==index);setSubmittedData(updatedData);// Update state after deletion\nsetMessage('Entry deleted successfully.');// Deletion feedback\n};// Edit a row from the submitted data table\nconst handleEdit=index=>{setFormData(submittedData[index]);// Load data into the form\nsetSubmittedData(prevData=>prevData.filter((_,i)=>i!==index));// Remove the entry being edited\nsetMessage('Editing entry...');// Feedback message\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(\"header\",{children:/*#__PURE__*/_jsx(\"h1\",{children:\"Dynamic Form\"})}),/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-container\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"formType\",children:\"Choose Form Type:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"formType\",value:formType,onChange:e=>setFormType(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Select --\"}),/*#__PURE__*/_jsx(\"option\",{value:\"userInformation\",children:\"User Information\"}),/*#__PURE__*/_jsx(\"option\",{value:\"addressInformation\",children:\"Address Information\"}),/*#__PURE__*/_jsx(\"option\",{value:\"paymentInformation\",children:\"Payment Information\"})]}),formFields.length>0&&/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[formFields.map(field=>/*#__PURE__*/_jsxs(\"div\",{className:\"form-field\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:field.name,children:[field.label,\" \",field.required&&'*']}),field.type==='dropdown'?/*#__PURE__*/_jsxs(\"select\",{id:field.name,name:field.name,value:formData[field.name]||'',onChange:e=>handleInputChange(e,field),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Select --\"}),field.options.map(option=>/*#__PURE__*/_jsx(\"option\",{value:option,children:option},option))]}):/*#__PURE__*/_jsx(\"input\",{id:field.name,type:field.type,name:field.name,value:formData[field.name]||'',onChange:e=>handleInputChange(e,field),required:field.required}),formErrors[field.name]&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:formErrors[field.name]})]},field.name)),/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{style:{width:`${progress}%`}})}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]})]}),message&&/*#__PURE__*/_jsx(\"p\",{className:\"message\",children:message}),submittedData.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"data-table\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Submitted Data\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[Object.keys(submittedData[0]).map(key=>/*#__PURE__*/_jsx(\"th\",{children:key},key)),/*#__PURE__*/_jsx(\"th\",{children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:submittedData.map((data,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[Object.values(data).map((value,i)=>/*#__PURE__*/_jsx(\"td\",{children:value},i)),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleEdit(index),children:\"Edit\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleDelete(index),children:\"Delete\"})]})]},index))})]})]})]}),/*#__PURE__*/_jsx(\"footer\",{children:/*#__PURE__*/_jsx(\"p\",{children:\"\\xA9 2024 Dynamic Form App\"})})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","App","formType","setFormType","formFields","setFormFields","formData","setFormData","progress","setProgress","submittedData","setSubmittedData","message","setMessage","formErrors","setFormErrors","apiResponses","useMemo","userInformation","fields","name","type","label","required","addressInformation","options","paymentInformation","_apiResponses$formTyp","handleInputChange","e","field","value","target","prevData","errors","isNaN","trim","validFields","filter","length","handleSubmit","preventDefault","forEach","Object","keys","handleDelete","index","updatedData","_","i","handleEdit","className","children","htmlFor","id","onChange","onSubmit","map","option","style","width","key","data","values","onClick"],"sources":["C:/xampp/htdocs/Dynamic-Form-App/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// const App = () => {\n//   // State for the selected form type\n//   const [formType, setFormType] = useState('');\n  \n//   // State to hold the fields for the selected form type\n//   const [formFields, setFormFields] = useState([]);\n  \n//   // State to store user input for the form\n//   const [formData, setFormData] = useState({});\n  \n//   // State to track the progress of form completion\n//   const [progress, setProgress] = useState(0);\n  \n//   // State to hold all submitted form data\n//   const [submittedData, setSubmittedData] = useState([]);\n  \n//   // State to display messages for user actions\n//   const [message, setMessage] = useState('');\n\n//   // Simulated API responses for different form types\n//   const apiResponses = React.useMemo(() => ({\n//     userInformation: {\n//       fields: [\n//         { name: 'firstName', type: 'text', label: 'First Name', required: true },\n//         { name: 'lastName', type: 'text', label: 'Last Name', required: true },\n//         { name: 'age', type: 'number', label: 'Age', required: false },\n//       ],\n//     },\n//     addressInformation: {\n//       fields: [\n//         { name: 'street', type: 'text', label: 'Street', required: true },\n//         { name: 'city', type: 'text', label: 'City', required: true },\n//         { name: 'state', type: 'dropdown', label: 'State', options: ['California', 'Texas', 'New York'], required: true },\n//         { name: 'zipCode', type: 'text', label: 'Zip Code', required: false },\n//       ],\n//     },\n//     paymentInformation: {\n//       fields: [\n//         { name: 'cardNumber', type: 'text', label: 'Card Number', required: true },\n//         { name: 'expiryDate', type: 'date', label: 'Expiry Date', required: true },\n//         { name: 'cvv', type: 'password', label: 'CVV', required: true },\n//         { name: 'cardholderName', type: 'text', label: 'Cardholder Name', required: true },\n//       ],\n//     },\n//   }), []);\n  \n\n//   // Effect to load form fields when form type changes\n//   useEffect(() => {\n//     if (formType) {\n//       setFormFields(apiResponses[formType]?.fields || []); // Fetch fields based on selected form type\n//       setFormData({}); // Reset form data\n//       setProgress(0); // Reset progress bar\n//     }\n//   }, [formType, apiResponses]);\n  \n\n//   // Handler for form field changes\n//   const handleInputChange = (e, field) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({ ...prevData, [name]: value })); // Update form data\n\n//     // Calculate progress as a percentage of completed required fields\n//     const completedFields = formFields.filter((field) => formData[field.name] || field.name === name);\n//     setProgress((completedFields.length / formFields.length) * 100);\n//   };\n\n//   // Form submission handler\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     // Validate required fields\n//     const requiredFields = formFields.filter((field) => field.required);\n//     const missingFields = requiredFields.filter((field) => !formData[field.name]);\n\n//     if (missingFields.length) {\n//       setMessage('Please fill in all required fields.'); // Error message for missing fields\n//     } else {\n//       setSubmittedData((prevData) => [...prevData, formData]); // Add form data to submitted list\n//       setFormType(''); // Reset form type\n//       setMessage('Form submitted successfully!'); // Success message\n//     }\n//   };\n\n//   // Delete a row from the submitted data table\n//   const handleDelete = (index) => {\n//     const updatedData = submittedData.filter((_, i) => i !== index);\n//     setSubmittedData(updatedData); // Update state after deletion\n//     setMessage('Entry deleted successfully.'); // Deletion feedback\n//   };\n\n//   // Edit a row from the submitted data table\n//   const handleEdit = (index) => {\n//     setFormData(submittedData[index]); // Load data into the form\n//     setSubmittedData((prevData) => prevData.filter((_, i) => i !== index)); // Remove the entry being edited\n//     setMessage('Editing entry...'); // Feedback message\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <header>\n//         <h1>Dynamic Form</h1>\n//       </header>\n//       <main>\n//         <div className=\"form-container\">\n//           {/* Dropdown to select form type */}\n//           <label htmlFor=\"formType\">Choose Form Type:</label>\n//           <select\n//             id=\"formType\"\n//             value={formType}\n//             onChange={(e) => setFormType(e.target.value)}\n//           >\n//             <option value=\"\">-- Select --</option>\n//             <option value=\"userInformation\">User Information</option>\n//             <option value=\"addressInformation\">Address Information</option>\n//             <option value=\"paymentInformation\">Payment Information</option>\n//           </select>\n\n//           {/* Render form fields dynamically */}\n//           {formFields.length > 0 && (\n//             <form onSubmit={handleSubmit}>\n//               {formFields.map((field) => (\n//                 <div key={field.name} className=\"form-field\">\n//                   <label htmlFor={field.name}>\n//                     {field.label} {field.required && '*'}\n//                   </label>\n//                   {field.type === 'dropdown' ? (\n//                     <select\n//                       id={field.name}\n//                       name={field.name}\n//                       value={formData[field.name] || ''}\n//                       onChange={(e) => handleInputChange(e, field)}\n//                     >\n//                       <option value=\"\">-- Select --</option>\n//                       {field.options.map((option) => (\n//                         <option key={option} value={option}>\n//                           {option}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   ) : (\n//                     <input\n//                       id={field.name}\n//                       type={field.type}\n//                       name={field.name}\n//                       value={formData[field.name] || ''}\n//                       onChange={(e) => handleInputChange(e, field)}\n//                       required={field.required}\n//                     />\n//                   )}\n//                 </div>\n//               ))}\n//               {/* Progress bar for form completion */}\n//               <div className=\"progress-bar\">\n//                 <div style={{ width: `${progress}%` }}></div>\n//               </div>\n//               <button type=\"submit\">Submit</button>\n//             </form>\n//           )}\n//         </div>\n\n//         {/* Display feedback message */}\n//         {message && <p className=\"message\">{message}</p>}\n\n//         {/* Display submitted data in tabular format */}\n//         {submittedData.length > 0 && (\n//           <div className=\"data-table\">\n//             <h2>Submitted Data</h2>\n//             <table>\n//               <thead>\n//                 <tr>\n//                   {Object.keys(submittedData[0]).map((key) => (\n//                     <th key={key}>{key}</th>\n//                   ))}\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {submittedData.map((data, index) => (\n//                   <tr key={index}>\n//                     {Object.values(data).map((value, i) => (\n//                       <td key={i}>{value}</td>\n//                     ))}\n//                     <td>\n//                       <button onClick={() => handleEdit(index)}>Edit</button>\n//                       <button onClick={() => handleDelete(index)}>Delete</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </main>\n//       <footer>\n//         <p>&copy; 2024 Dynamic Form App</p>\n//       </footer>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst App = () => {\n  // State for the selected form type\n  const [formType, setFormType] = useState('');\n  \n  // State to hold the fields for the selected form type\n  const [formFields, setFormFields] = useState([]);\n  \n  // State to store user input for the form\n  const [formData, setFormData] = useState({});\n  \n  // State to track the progress of form completion\n  const [progress, setProgress] = useState(0);\n  \n  // State to hold all submitted form data\n  const [submittedData, setSubmittedData] = useState([]);\n  \n  // State to display messages for user actions\n  const [message, setMessage] = useState('');\n  \n  // State for form validation errors\n  const [formErrors, setFormErrors] = useState({});\n\n  // Simulated API responses for different form types\n  const apiResponses = React.useMemo(() => ({\n    userInformation: {\n      fields: [\n        { name: 'firstName', type: 'text', label: 'First Name', required: true },\n        { name: 'lastName', type: 'text', label: 'Last Name', required: true },\n        { name: 'age', type: 'number', label: 'Age', required: false },\n      ],\n    },\n    addressInformation: {\n      fields: [\n        { name: 'street', type: 'text', label: 'Street', required: true },\n        { name: 'city', type: 'text', label: 'City', required: true },\n        { name: 'state', type: 'dropdown', label: 'State', options: ['California', 'Texas', 'New York'], required: true },\n        { name: 'zipCode', type: 'text', label: 'Zip Code', required: false },\n      ],\n    },\n    paymentInformation: {\n      fields: [\n        { name: 'cardNumber', type: 'text', label: 'Card Number', required: true },\n        { name: 'expiryDate', type: 'date', label: 'Expiry Date', required: true },\n        { name: 'cvv', type: 'password', label: 'CVV', required: true },\n        { name: 'cardholderName', type: 'text', label: 'Cardholder Name', required: true },\n      ],\n    },\n  }), []);\n\n  // Effect to load form fields when form type changes\n  useEffect(() => {\n    if (formType) {\n      setFormFields(apiResponses[formType]?.fields || []); // Fetch fields based on selected form type\n      setFormData({}); // Reset form data\n      setProgress(0); // Reset progress bar\n      setFormErrors({}); // Clear errors\n    }\n  }, [formType, apiResponses]);\n\n  // Handler for form field changes\n  const handleInputChange = (e, field) => {\n    const { name, value } = e.target;\n    setFormData((prevData) => ({ ...prevData, [name]: value })); // Update form data\n\n    // Validate field dynamically as the user types\n    let errors = { ...formErrors };\n    if (field.required && !value) {\n      errors[name] = `${field.label} is required`;\n    } else if (field.type === 'number' && isNaN(value)) {\n      errors[name] = `${field.label} must be a valid number`;\n    } else if (field.type === 'text' && value.trim() === '') {\n      errors[name] = `${field.label} cannot be empty`;\n    } else {\n      delete errors[name]; // Remove error when the field is valid\n    }\n    setFormErrors(errors);\n\n    // Calculate progress based on valid fields\n    const validFields = formFields.filter(\n      (field) => formData[field.name] && !formErrors[field.name]\n    );\n    setProgress((validFields.length / formFields.length) * 100);\n  };\n\n  // Form submission handler\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let errors = {};\n\n    // Validate required fields and data types\n    formFields.forEach((field) => {\n      if (field.required && !formData[field.name]) {\n        errors[field.name] = `${field.label} is required`;\n      } else if (field.type === 'number' && isNaN(formData[field.name])) {\n        errors[field.name] = `${field.label} must be a valid number`;\n      } else if (field.type === 'text' && formData[field.name].trim() === '') {\n        errors[field.name] = `${field.label} cannot be empty`;\n      }\n    });\n\n    // Set errors and check if form is valid\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors); // Display errors\n      setMessage('Please fill in all required fields correctly.'); // Global error message\n    } else {\n      setFormErrors({}); // Clear previous errors\n      setSubmittedData((prevData) => [...prevData, formData]); // Submit data\n      setFormType(''); // Reset form type\n      setMessage('Form submitted successfully!'); // Success message\n    }\n  };\n\n  // Delete a row from the submitted data table\n  const handleDelete = (index) => {\n    const updatedData = submittedData.filter((_, i) => i !== index);\n    setSubmittedData(updatedData); // Update state after deletion\n    setMessage('Entry deleted successfully.'); // Deletion feedback\n  };\n\n  // Edit a row from the submitted data table\n  const handleEdit = (index) => {\n    setFormData(submittedData[index]); // Load data into the form\n    setSubmittedData((prevData) => prevData.filter((_, i) => i !== index)); // Remove the entry being edited\n    setMessage('Editing entry...'); // Feedback message\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Dynamic Form</h1>\n      </header>\n      <main>\n        <div className=\"form-container\">\n          {/* Dropdown to select form type */}\n          <label htmlFor=\"formType\">Choose Form Type:</label>\n          <select\n            id=\"formType\"\n            value={formType}\n            onChange={(e) => setFormType(e.target.value)}\n          >\n            <option value=\"\">-- Select --</option>\n            <option value=\"userInformation\">User Information</option>\n            <option value=\"addressInformation\">Address Information</option>\n            <option value=\"paymentInformation\">Payment Information</option>\n          </select>\n\n          {/* Render form fields dynamically */}\n          {formFields.length > 0 && (\n            <form onSubmit={handleSubmit}>\n              {formFields.map((field) => (\n                <div key={field.name} className=\"form-field\">\n                  <label htmlFor={field.name}>\n                    {field.label} {field.required && '*'}\n                  </label>\n                  {field.type === 'dropdown' ? (\n                    <select\n                      id={field.name}\n                      name={field.name}\n                      value={formData[field.name] || ''}\n                      onChange={(e) => handleInputChange(e, field)}\n                    >\n                      <option value=\"\">-- Select --</option>\n                      {field.options.map((option) => (\n                        <option key={option} value={option}>\n                          {option}\n                        </option>\n                      ))}\n                    </select>\n                  ) : (\n                    <input\n                      id={field.name}\n                      type={field.type}\n                      name={field.name}\n                      value={formData[field.name] || ''}\n                      onChange={(e) => handleInputChange(e, field)}\n                      required={field.required}\n                    />\n                  )}\n\n                  {/* Display error message if any */}\n                  {formErrors[field.name] && (\n                    <p className=\"error-message\">{formErrors[field.name]}</p>\n                  )}\n                </div>\n              ))}\n              {/* Progress bar for form completion */}\n              <div className=\"progress-bar\">\n                <div style={{ width: `${progress}%` }}></div>\n              </div>\n              <button type=\"submit\">Submit</button>\n            </form>\n          )}\n        </div>\n\n        {/* Display feedback message */}\n        {message && <p className=\"message\">{message}</p>}\n\n        {/* Display submitted data in tabular format */}\n        {submittedData.length > 0 && (\n          <div className=\"data-table\">\n            <h2>Submitted Data</h2>\n            <table>\n              <thead>\n                <tr>\n                  {Object.keys(submittedData[0]).map((key) => (\n                    <th key={key}>{key}</th>\n                  ))}\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {submittedData.map((data, index) => (\n                  <tr key={index}>\n                    {Object.values(data).map((value, i) => (\n                      <td key={i}>{value}</td>\n                    ))}\n                    <td>\n                      <button onClick={() => handleEdit(index)}>Edit</button>\n                      <button onClick={() => handleDelete(index)}>Delete</button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </main>\n      <footer>\n        <p>&copy; 2024 Dynamic Form App</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}