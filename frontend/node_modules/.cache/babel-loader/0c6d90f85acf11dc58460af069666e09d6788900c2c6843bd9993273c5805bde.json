{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Frontend-code\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// const App = () => {\n//   // State for the selected form type\n//   const [formType, setFormType] = useState('');\n\n//   // State to hold the fields for the selected form type\n//   const [formFields, setFormFields] = useState([]);\n\n//   // State to store user input for the form\n//   const [formData, setFormData] = useState({});\n\n//   // State to track the progress of form completion\n//   const [progress, setProgress] = useState(0);\n\n//   // State to hold all submitted form data\n//   const [submittedData, setSubmittedData] = useState([]);\n\n//   // State to display messages for user actions\n//   const [message, setMessage] = useState('');\n\n//   // Simulated API responses for different form types\n//   const apiResponses = React.useMemo(() => ({\n//     userInformation: {\n//       fields: [\n//         { name: 'firstName', type: 'text', label: 'First Name', required: true },\n//         { name: 'lastName', type: 'text', label: 'Last Name', required: true },\n//         { name: 'age', type: 'number', label: 'Age', required: false },\n//       ],\n//     },\n//     addressInformation: {\n//       fields: [\n//         { name: 'street', type: 'text', label: 'Street', required: true },\n//         { name: 'city', type: 'text', label: 'City', required: true },\n//         { name: 'state', type: 'dropdown', label: 'State', options: ['California', 'Texas', 'New York'], required: true },\n//         { name: 'zipCode', type: 'text', label: 'Zip Code', required: false },\n//       ],\n//     },\n//     paymentInformation: {\n//       fields: [\n//         { name: 'cardNumber', type: 'text', label: 'Card Number', required: true },\n//         { name: 'expiryDate', type: 'date', label: 'Expiry Date', required: true },\n//         { name: 'cvv', type: 'password', label: 'CVV', required: true },\n//         { name: 'cardholderName', type: 'text', label: 'Cardholder Name', required: true },\n//       ],\n//     },\n//   }), []);\n\n//   // Effect to load form fields when form type changes\n//   useEffect(() => {\n//     if (formType) {\n//       setFormFields(apiResponses[formType]?.fields || []); // Fetch fields based on selected form type\n//       setFormData({}); // Reset form data\n//       setProgress(0); // Reset progress bar\n//     }\n//   }, [formType, apiResponses]);\n\n//   // Handler for form field changes\n//   const handleInputChange = (e, field) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({ ...prevData, [name]: value })); // Update form data\n\n//     // Calculate progress as a percentage of completed required fields\n//     const completedFields = formFields.filter((field) => formData[field.name] || field.name === name);\n//     setProgress((completedFields.length / formFields.length) * 100);\n//   };\n\n//   // Form submission handler\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     // Validate required fields\n//     const requiredFields = formFields.filter((field) => field.required);\n//     const missingFields = requiredFields.filter((field) => !formData[field.name]);\n\n//     if (missingFields.length) {\n//       setMessage('Please fill in all required fields.'); // Error message for missing fields\n//     } else {\n//       setSubmittedData((prevData) => [...prevData, formData]); // Add form data to submitted list\n//       setFormType(''); // Reset form type\n//       setMessage('Form submitted successfully!'); // Success message\n//     }\n//   };\n\n//   // Delete a row from the submitted data table\n//   const handleDelete = (index) => {\n//     const updatedData = submittedData.filter((_, i) => i !== index);\n//     setSubmittedData(updatedData); // Update state after deletion\n//     setMessage('Entry deleted successfully.'); // Deletion feedback\n//   };\n\n//   // Edit a row from the submitted data table\n//   const handleEdit = (index) => {\n//     setFormData(submittedData[index]); // Load data into the form\n//     setSubmittedData((prevData) => prevData.filter((_, i) => i !== index)); // Remove the entry being edited\n//     setMessage('Editing entry...'); // Feedback message\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <header>\n//         <h1>Dynamic Form</h1>\n//       </header>\n//       <main>\n//         <div className=\"form-container\">\n//           {/* Dropdown to select form type */}\n//           <label htmlFor=\"formType\">Choose Form Type:</label>\n//           <select\n//             id=\"formType\"\n//             value={formType}\n//             onChange={(e) => setFormType(e.target.value)}\n//           >\n//             <option value=\"\">-- Select --</option>\n//             <option value=\"userInformation\">User Information</option>\n//             <option value=\"addressInformation\">Address Information</option>\n//             <option value=\"paymentInformation\">Payment Information</option>\n//           </select>\n\n//           {/* Render form fields dynamically */}\n//           {formFields.length > 0 && (\n//             <form onSubmit={handleSubmit}>\n//               {formFields.map((field) => (\n//                 <div key={field.name} className=\"form-field\">\n//                   <label htmlFor={field.name}>\n//                     {field.label} {field.required && '*'}\n//                   </label>\n//                   {field.type === 'dropdown' ? (\n//                     <select\n//                       id={field.name}\n//                       name={field.name}\n//                       value={formData[field.name] || ''}\n//                       onChange={(e) => handleInputChange(e, field)}\n//                     >\n//                       <option value=\"\">-- Select --</option>\n//                       {field.options.map((option) => (\n//                         <option key={option} value={option}>\n//                           {option}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   ) : (\n//                     <input\n//                       id={field.name}\n//                       type={field.type}\n//                       name={field.name}\n//                       value={formData[field.name] || ''}\n//                       onChange={(e) => handleInputChange(e, field)}\n//                       required={field.required}\n//                     />\n//                   )}\n//                 </div>\n//               ))}\n//               {/* Progress bar for form completion */}\n//               <div className=\"progress-bar\">\n//                 <div style={{ width: `${progress}%` }}></div>\n//               </div>\n//               <button type=\"submit\">Submit</button>\n//             </form>\n//           )}\n//         </div>\n\n//         {/* Display feedback message */}\n//         {message && <p className=\"message\">{message}</p>}\n\n//         {/* Display submitted data in tabular format */}\n//         {submittedData.length > 0 && (\n//           <div className=\"data-table\">\n//             <h2>Submitted Data</h2>\n//             <table>\n//               <thead>\n//                 <tr>\n//                   {Object.keys(submittedData[0]).map((key) => (\n//                     <th key={key}>{key}</th>\n//                   ))}\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {submittedData.map((data, index) => (\n//                   <tr key={index}>\n//                     {Object.values(data).map((value, i) => (\n//                       <td key={i}>{value}</td>\n//                     ))}\n//                     <td>\n//                       <button onClick={() => handleEdit(index)}>Edit</button>\n//                       <button onClick={() => handleDelete(index)}>Delete</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </main>\n//       <footer>\n//         <p>&copy; 2024 Dynamic Form App</p>\n//       </footer>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State for the selected form type\n  const [formType, setFormType] = useState('');\n\n  // State to hold the fields for the selected form type\n  const [formFields, setFormFields] = useState([]);\n\n  // State to store user input for the form\n  const [formData, setFormData] = useState({});\n\n  // State to track the progress of form completion\n  const [progress, setProgress] = useState(0);\n\n  // State to hold all submitted form data\n  const [submittedData, setSubmittedData] = useState([]);\n\n  // State to display messages for user actions\n  const [message, setMessage] = useState('');\n\n  // State for form validation errors\n  const [formErrors, setFormErrors] = useState({});\n\n  // Simulated API responses for different form types\n  const apiResponses = React.useMemo(() => ({\n    userInformation: {\n      fields: [{\n        name: 'firstName',\n        type: 'text',\n        label: 'First Name',\n        required: true\n      }, {\n        name: 'lastName',\n        type: 'text',\n        label: 'Last Name',\n        required: true\n      }, {\n        name: 'age',\n        type: 'number',\n        label: 'Age',\n        required: false\n      }]\n    },\n    addressInformation: {\n      fields: [{\n        name: 'street',\n        type: 'text',\n        label: 'Street',\n        required: true\n      }, {\n        name: 'city',\n        type: 'text',\n        label: 'City',\n        required: true\n      }, {\n        name: 'state',\n        type: 'dropdown',\n        label: 'State',\n        options: ['California', 'Texas', 'New York'],\n        required: true\n      }, {\n        name: 'zipCode',\n        type: 'text',\n        label: 'Zip Code',\n        required: false\n      }]\n    },\n    paymentInformation: {\n      fields: [{\n        name: 'cardNumber',\n        type: 'text',\n        label: 'Card Number',\n        required: true\n      }, {\n        name: 'expiryDate',\n        type: 'date',\n        label: 'Expiry Date',\n        required: true\n      }, {\n        name: 'cvv',\n        type: 'password',\n        label: 'CVV',\n        required: true\n      }, {\n        name: 'cardholderName',\n        type: 'text',\n        label: 'Cardholder Name',\n        required: true\n      }]\n    }\n  }), []);\n\n  // Effect to load form fields when form type changes\n  useEffect(() => {\n    if (formType) {\n      var _apiResponses$formTyp;\n      setFormFields(((_apiResponses$formTyp = apiResponses[formType]) === null || _apiResponses$formTyp === void 0 ? void 0 : _apiResponses$formTyp.fields) || []); // Fetch fields based on selected form type\n      setFormData({}); // Reset form data\n      setProgress(0); // Reset progress bar\n      setFormErrors({}); // Clear errors\n    }\n  }, [formType, apiResponses]);\n\n  // Handler for form field changes\n  const handleInputChange = (e, field) => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    })); // Update form data\n\n    // Validate field dynamically as the user types\n    let errors = {\n      ...formErrors\n    };\n    if (field.required && !value) {\n      errors[name] = `${field.label} is required`;\n    } else if (field.type === 'number' && isNaN(value)) {\n      errors[name] = `${field.label} must be a valid number`;\n    } else if (field.type === 'text' && value.trim() === '') {\n      errors[name] = `${field.label} cannot be empty`;\n    } else {\n      delete errors[name]; // Remove error when the field is valid\n    }\n    setFormErrors(errors);\n\n    // Calculate progress based on valid fields\n    const validFields = formFields.filter(field => formData[field.name] && !formErrors[field.name]);\n    setProgress(validFields.length / formFields.length * 100);\n  };\n\n  // Form submission handler\n  const handleSubmit = e => {\n    e.preventDefault();\n    let errors = {};\n\n    // Validate required fields and data types\n    formFields.forEach(field => {\n      if (field.required && !formData[field.name]) {\n        errors[field.name] = `${field.label} is required`;\n      } else if (field.type === 'number' && isNaN(formData[field.name])) {\n        errors[field.name] = `${field.label} must be a valid number`;\n      } else if (field.type === 'text' && formData[field.name].trim() === '') {\n        errors[field.name] = `${field.label} cannot be empty`;\n      }\n    });\n\n    // Set errors and check if form is valid\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors); // Display errors\n      setMessage('Please fill in all required fields correctly.'); // Global error message\n    } else {\n      setFormErrors({}); // Clear previous errors\n      setSubmittedData(prevData => [...prevData, formData]); // Submit data\n      setFormType(''); // Reset form type\n      setMessage('Form submitted successfully!'); // Success message\n    }\n  };\n\n  // Delete a row from the submitted data table\n  const handleDelete = index => {\n    const updatedData = submittedData.filter((_, i) => i !== index);\n    setSubmittedData(updatedData); // Update state after deletion\n    setMessage('Entry deleted successfully.'); // Deletion feedback\n  };\n\n  // Edit a row from the submitted data table\n  const handleEdit = index => {\n    setFormData(submittedData[index]); // Load data into the form\n    setSubmittedData(prevData => prevData.filter((_, i) => i !== index)); // Remove the entry being edited\n    setMessage('Editing entry...'); // Feedback message\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dynamic Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"formType\",\n          children: \"Choose Form Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"formType\",\n          value: formType,\n          onChange: e => setFormType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"userInformation\",\n            children: \"User Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"addressInformation\",\n            children: \"Address Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"paymentInformation\",\n            children: \"Payment Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), formFields.length > 0 && /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [formFields.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: field.name,\n              children: [field.label, \" \", field.required && '*']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 19\n            }, this), field.type === 'dropdown' ? /*#__PURE__*/_jsxDEV(\"select\", {\n              id: field.name,\n              name: field.name,\n              value: formData[field.name] || '',\n              onChange: e => handleInputChange(e, field),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"-- Select --\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 23\n              }, this), field.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option,\n                children: option\n              }, option, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 25\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n              id: field.name,\n              type: field.type,\n              name: field.name,\n              value: formData[field.name] || '',\n              onChange: e => handleInputChange(e, field),\n              required: field.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 21\n            }, this), formErrors[field.name] && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error-message\",\n              children: formErrors[field.name]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 21\n            }, this)]\n          }, field.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: `${progress}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 21\n      }, this), submittedData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Submitted Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [Object.keys(submittedData[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: key\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: submittedData.map((data, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [Object.values(data).map((value, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: value\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 23\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEdit(index),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDelete(index),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 Dynamic Form App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fgxPv0q5RTmJUkyAGA7ab2M9gFc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","formType","setFormType","formFields","setFormFields","formData","setFormData","progress","setProgress","submittedData","setSubmittedData","message","setMessage","formErrors","setFormErrors","apiResponses","useMemo","userInformation","fields","name","type","label","required","addressInformation","options","paymentInformation","_apiResponses$formTyp","handleInputChange","e","field","value","target","prevData","errors","isNaN","trim","validFields","filter","length","handleSubmit","preventDefault","forEach","Object","keys","handleDelete","index","updatedData","_","i","handleEdit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","onSubmit","map","option","style","width","key","data","values","onClick","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/Frontend-code/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// const App = () => {\n//   // State for the selected form type\n//   const [formType, setFormType] = useState('');\n  \n//   // State to hold the fields for the selected form type\n//   const [formFields, setFormFields] = useState([]);\n  \n//   // State to store user input for the form\n//   const [formData, setFormData] = useState({});\n  \n//   // State to track the progress of form completion\n//   const [progress, setProgress] = useState(0);\n  \n//   // State to hold all submitted form data\n//   const [submittedData, setSubmittedData] = useState([]);\n  \n//   // State to display messages for user actions\n//   const [message, setMessage] = useState('');\n\n//   // Simulated API responses for different form types\n//   const apiResponses = React.useMemo(() => ({\n//     userInformation: {\n//       fields: [\n//         { name: 'firstName', type: 'text', label: 'First Name', required: true },\n//         { name: 'lastName', type: 'text', label: 'Last Name', required: true },\n//         { name: 'age', type: 'number', label: 'Age', required: false },\n//       ],\n//     },\n//     addressInformation: {\n//       fields: [\n//         { name: 'street', type: 'text', label: 'Street', required: true },\n//         { name: 'city', type: 'text', label: 'City', required: true },\n//         { name: 'state', type: 'dropdown', label: 'State', options: ['California', 'Texas', 'New York'], required: true },\n//         { name: 'zipCode', type: 'text', label: 'Zip Code', required: false },\n//       ],\n//     },\n//     paymentInformation: {\n//       fields: [\n//         { name: 'cardNumber', type: 'text', label: 'Card Number', required: true },\n//         { name: 'expiryDate', type: 'date', label: 'Expiry Date', required: true },\n//         { name: 'cvv', type: 'password', label: 'CVV', required: true },\n//         { name: 'cardholderName', type: 'text', label: 'Cardholder Name', required: true },\n//       ],\n//     },\n//   }), []);\n  \n\n//   // Effect to load form fields when form type changes\n//   useEffect(() => {\n//     if (formType) {\n//       setFormFields(apiResponses[formType]?.fields || []); // Fetch fields based on selected form type\n//       setFormData({}); // Reset form data\n//       setProgress(0); // Reset progress bar\n//     }\n//   }, [formType, apiResponses]);\n  \n\n//   // Handler for form field changes\n//   const handleInputChange = (e, field) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({ ...prevData, [name]: value })); // Update form data\n\n//     // Calculate progress as a percentage of completed required fields\n//     const completedFields = formFields.filter((field) => formData[field.name] || field.name === name);\n//     setProgress((completedFields.length / formFields.length) * 100);\n//   };\n\n//   // Form submission handler\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     // Validate required fields\n//     const requiredFields = formFields.filter((field) => field.required);\n//     const missingFields = requiredFields.filter((field) => !formData[field.name]);\n\n//     if (missingFields.length) {\n//       setMessage('Please fill in all required fields.'); // Error message for missing fields\n//     } else {\n//       setSubmittedData((prevData) => [...prevData, formData]); // Add form data to submitted list\n//       setFormType(''); // Reset form type\n//       setMessage('Form submitted successfully!'); // Success message\n//     }\n//   };\n\n//   // Delete a row from the submitted data table\n//   const handleDelete = (index) => {\n//     const updatedData = submittedData.filter((_, i) => i !== index);\n//     setSubmittedData(updatedData); // Update state after deletion\n//     setMessage('Entry deleted successfully.'); // Deletion feedback\n//   };\n\n//   // Edit a row from the submitted data table\n//   const handleEdit = (index) => {\n//     setFormData(submittedData[index]); // Load data into the form\n//     setSubmittedData((prevData) => prevData.filter((_, i) => i !== index)); // Remove the entry being edited\n//     setMessage('Editing entry...'); // Feedback message\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <header>\n//         <h1>Dynamic Form</h1>\n//       </header>\n//       <main>\n//         <div className=\"form-container\">\n//           {/* Dropdown to select form type */}\n//           <label htmlFor=\"formType\">Choose Form Type:</label>\n//           <select\n//             id=\"formType\"\n//             value={formType}\n//             onChange={(e) => setFormType(e.target.value)}\n//           >\n//             <option value=\"\">-- Select --</option>\n//             <option value=\"userInformation\">User Information</option>\n//             <option value=\"addressInformation\">Address Information</option>\n//             <option value=\"paymentInformation\">Payment Information</option>\n//           </select>\n\n//           {/* Render form fields dynamically */}\n//           {formFields.length > 0 && (\n//             <form onSubmit={handleSubmit}>\n//               {formFields.map((field) => (\n//                 <div key={field.name} className=\"form-field\">\n//                   <label htmlFor={field.name}>\n//                     {field.label} {field.required && '*'}\n//                   </label>\n//                   {field.type === 'dropdown' ? (\n//                     <select\n//                       id={field.name}\n//                       name={field.name}\n//                       value={formData[field.name] || ''}\n//                       onChange={(e) => handleInputChange(e, field)}\n//                     >\n//                       <option value=\"\">-- Select --</option>\n//                       {field.options.map((option) => (\n//                         <option key={option} value={option}>\n//                           {option}\n//                         </option>\n//                       ))}\n//                     </select>\n//                   ) : (\n//                     <input\n//                       id={field.name}\n//                       type={field.type}\n//                       name={field.name}\n//                       value={formData[field.name] || ''}\n//                       onChange={(e) => handleInputChange(e, field)}\n//                       required={field.required}\n//                     />\n//                   )}\n//                 </div>\n//               ))}\n//               {/* Progress bar for form completion */}\n//               <div className=\"progress-bar\">\n//                 <div style={{ width: `${progress}%` }}></div>\n//               </div>\n//               <button type=\"submit\">Submit</button>\n//             </form>\n//           )}\n//         </div>\n\n//         {/* Display feedback message */}\n//         {message && <p className=\"message\">{message}</p>}\n\n//         {/* Display submitted data in tabular format */}\n//         {submittedData.length > 0 && (\n//           <div className=\"data-table\">\n//             <h2>Submitted Data</h2>\n//             <table>\n//               <thead>\n//                 <tr>\n//                   {Object.keys(submittedData[0]).map((key) => (\n//                     <th key={key}>{key}</th>\n//                   ))}\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {submittedData.map((data, index) => (\n//                   <tr key={index}>\n//                     {Object.values(data).map((value, i) => (\n//                       <td key={i}>{value}</td>\n//                     ))}\n//                     <td>\n//                       <button onClick={() => handleEdit(index)}>Edit</button>\n//                       <button onClick={() => handleDelete(index)}>Delete</button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </main>\n//       <footer>\n//         <p>&copy; 2024 Dynamic Form App</p>\n//       </footer>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst App = () => {\n  // State for the selected form type\n  const [formType, setFormType] = useState('');\n  \n  // State to hold the fields for the selected form type\n  const [formFields, setFormFields] = useState([]);\n  \n  // State to store user input for the form\n  const [formData, setFormData] = useState({});\n  \n  // State to track the progress of form completion\n  const [progress, setProgress] = useState(0);\n  \n  // State to hold all submitted form data\n  const [submittedData, setSubmittedData] = useState([]);\n  \n  // State to display messages for user actions\n  const [message, setMessage] = useState('');\n  \n  // State for form validation errors\n  const [formErrors, setFormErrors] = useState({});\n\n  // Simulated API responses for different form types\n  const apiResponses = React.useMemo(() => ({\n    userInformation: {\n      fields: [\n        { name: 'firstName', type: 'text', label: 'First Name', required: true },\n        { name: 'lastName', type: 'text', label: 'Last Name', required: true },\n        { name: 'age', type: 'number', label: 'Age', required: false },\n      ],\n    },\n    addressInformation: {\n      fields: [\n        { name: 'street', type: 'text', label: 'Street', required: true },\n        { name: 'city', type: 'text', label: 'City', required: true },\n        { name: 'state', type: 'dropdown', label: 'State', options: ['California', 'Texas', 'New York'], required: true },\n        { name: 'zipCode', type: 'text', label: 'Zip Code', required: false },\n      ],\n    },\n    paymentInformation: {\n      fields: [\n        { name: 'cardNumber', type: 'text', label: 'Card Number', required: true },\n        { name: 'expiryDate', type: 'date', label: 'Expiry Date', required: true },\n        { name: 'cvv', type: 'password', label: 'CVV', required: true },\n        { name: 'cardholderName', type: 'text', label: 'Cardholder Name', required: true },\n      ],\n    },\n  }), []);\n\n  // Effect to load form fields when form type changes\n  useEffect(() => {\n    if (formType) {\n      setFormFields(apiResponses[formType]?.fields || []); // Fetch fields based on selected form type\n      setFormData({}); // Reset form data\n      setProgress(0); // Reset progress bar\n      setFormErrors({}); // Clear errors\n    }\n  }, [formType, apiResponses]);\n\n  // Handler for form field changes\n  const handleInputChange = (e, field) => {\n    const { name, value } = e.target;\n    setFormData((prevData) => ({ ...prevData, [name]: value })); // Update form data\n\n    // Validate field dynamically as the user types\n    let errors = { ...formErrors };\n    if (field.required && !value) {\n      errors[name] = `${field.label} is required`;\n    } else if (field.type === 'number' && isNaN(value)) {\n      errors[name] = `${field.label} must be a valid number`;\n    } else if (field.type === 'text' && value.trim() === '') {\n      errors[name] = `${field.label} cannot be empty`;\n    } else {\n      delete errors[name]; // Remove error when the field is valid\n    }\n    setFormErrors(errors);\n\n    // Calculate progress based on valid fields\n    const validFields = formFields.filter(\n      (field) => formData[field.name] && !formErrors[field.name]\n    );\n    setProgress((validFields.length / formFields.length) * 100);\n  };\n\n  // Form submission handler\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let errors = {};\n\n    // Validate required fields and data types\n    formFields.forEach((field) => {\n      if (field.required && !formData[field.name]) {\n        errors[field.name] = `${field.label} is required`;\n      } else if (field.type === 'number' && isNaN(formData[field.name])) {\n        errors[field.name] = `${field.label} must be a valid number`;\n      } else if (field.type === 'text' && formData[field.name].trim() === '') {\n        errors[field.name] = `${field.label} cannot be empty`;\n      }\n    });\n\n    // Set errors and check if form is valid\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors); // Display errors\n      setMessage('Please fill in all required fields correctly.'); // Global error message\n    } else {\n      setFormErrors({}); // Clear previous errors\n      setSubmittedData((prevData) => [...prevData, formData]); // Submit data\n      setFormType(''); // Reset form type\n      setMessage('Form submitted successfully!'); // Success message\n    }\n  };\n\n  // Delete a row from the submitted data table\n  const handleDelete = (index) => {\n    const updatedData = submittedData.filter((_, i) => i !== index);\n    setSubmittedData(updatedData); // Update state after deletion\n    setMessage('Entry deleted successfully.'); // Deletion feedback\n  };\n\n  // Edit a row from the submitted data table\n  const handleEdit = (index) => {\n    setFormData(submittedData[index]); // Load data into the form\n    setSubmittedData((prevData) => prevData.filter((_, i) => i !== index)); // Remove the entry being edited\n    setMessage('Editing entry...'); // Feedback message\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Dynamic Form</h1>\n      </header>\n      <main>\n        <div className=\"form-container\">\n          {/* Dropdown to select form type */}\n          <label htmlFor=\"formType\">Choose Form Type:</label>\n          <select\n            id=\"formType\"\n            value={formType}\n            onChange={(e) => setFormType(e.target.value)}\n          >\n            <option value=\"\">-- Select --</option>\n            <option value=\"userInformation\">User Information</option>\n            <option value=\"addressInformation\">Address Information</option>\n            <option value=\"paymentInformation\">Payment Information</option>\n          </select>\n\n          {/* Render form fields dynamically */}\n          {formFields.length > 0 && (\n            <form onSubmit={handleSubmit}>\n              {formFields.map((field) => (\n                <div key={field.name} className=\"form-field\">\n                  <label htmlFor={field.name}>\n                    {field.label} {field.required && '*'}\n                  </label>\n                  {field.type === 'dropdown' ? (\n                    <select\n                      id={field.name}\n                      name={field.name}\n                      value={formData[field.name] || ''}\n                      onChange={(e) => handleInputChange(e, field)}\n                    >\n                      <option value=\"\">-- Select --</option>\n                      {field.options.map((option) => (\n                        <option key={option} value={option}>\n                          {option}\n                        </option>\n                      ))}\n                    </select>\n                  ) : (\n                    <input\n                      id={field.name}\n                      type={field.type}\n                      name={field.name}\n                      value={formData[field.name] || ''}\n                      onChange={(e) => handleInputChange(e, field)}\n                      required={field.required}\n                    />\n                  )}\n\n                  {/* Display error message if any */}\n                  {formErrors[field.name] && (\n                    <p className=\"error-message\">{formErrors[field.name]}</p>\n                  )}\n                </div>\n              ))}\n              {/* Progress bar for form completion */}\n              <div className=\"progress-bar\">\n                <div style={{ width: `${progress}%` }}></div>\n              </div>\n              <button type=\"submit\">Submit</button>\n            </form>\n          )}\n        </div>\n\n        {/* Display feedback message */}\n        {message && <p className=\"message\">{message}</p>}\n\n        {/* Display submitted data in tabular format */}\n        {submittedData.length > 0 && (\n          <div className=\"data-table\">\n            <h2>Submitted Data</h2>\n            <table>\n              <thead>\n                <tr>\n                  {Object.keys(submittedData[0]).map((key) => (\n                    <th key={key}>{key}</th>\n                  ))}\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {submittedData.map((data, index) => (\n                  <tr key={index}>\n                    {Object.values(data).map((value, i) => (\n                      <td key={i}>{value}</td>\n                    ))}\n                    <td>\n                      <button onClick={() => handleEdit(index)}>Edit</button>\n                      <button onClick={() => handleDelete(index)}>Delete</button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </main>\n      <footer>\n        <p>&copy; 2024 Dynamic Form App</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}